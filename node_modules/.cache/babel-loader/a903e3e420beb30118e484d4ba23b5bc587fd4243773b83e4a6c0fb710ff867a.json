{"ast":null,"code":"var _jsxFileName = \"/Users/bl4ze/web/worlde/src/components/GameGrid.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport GameRow from './GameRow';\nimport { WORDLIST } from '../wordlist/cuvinte';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameGrid() {\n  _s();\n  // fetch from a database\n  const startDate = new Date().valueOf();\n  const now = Date.now();\n  const index = Math.floor((now - startDate) / 86400000);\n  const secretWord = WORDLIST[index % WORDLIST.length];\n  const [rowIdx, setRowIdx] = useState(0);\n  const [words, updateWords] = useState(Array(6).fill(''));\n  const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n  const updateWordAtRow = word => {\n    const updatedWords = [...words];\n    updatedWords[rowIdx] = word;\n    updateWords(updatedWords);\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) {\n        return;\n      }\n      setRevealStates(prevStates => {\n        const newStates = [...prevStates];\n        newStates[rowIdx] = true;\n        return newStates;\n      });\n      setRowIdx(Math.min(rowIdx + 1, 5));\n    } else if (event.key == 'Backspace') {\n      updateWordAtRow(words[rowIdx].slice(0, -1));\n    } else if (event.key.match(/[a-z]/i) && event.key.length == 1 && words[rowIdx].length < 5) {\n      updateWordAtRow(words[rowIdx].slice(0, -1));\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [words, rowIdx]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[0],\n      secretWord: secretWord,\n      reveal: revealStates[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[1],\n      secretWord: secretWord,\n      reveal: revealStates[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[2],\n      secretWord: secretWord,\n      reveal: revealStates[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[3],\n      secretWord: secretWord,\n      reveal: revealStates[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[4],\n      secretWord: secretWord,\n      reveal: revealStates[4]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[5],\n      secretWord: secretWord,\n      reveal: revealStates[5]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(GameGrid, \"tP5POiloizNcLfuvHAipNShCdSA=\");\n_c = GameGrid;\nexport default GameGrid;\nvar _c;\n$RefreshReg$(_c, \"GameGrid\");","map":{"version":3,"names":["useEffect","useState","GameRow","WORDLIST","jsxDEV","_jsxDEV","GameGrid","_s","startDate","Date","valueOf","now","index","Math","floor","secretWord","length","rowIdx","setRowIdx","words","updateWords","Array","fill","revealStates","setRevealStates","updateWordAtRow","word","updatedWords","handleKeyDown","event","key","includes","prevStates","newStates","min","slice","match","window","addEventListener","removeEventListener","children","reveal","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bl4ze/web/worlde/src/components/GameGrid.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport GameRow from './GameRow'\nimport { WORDLIST } from '../wordlist/cuvinte';\n\n\nfunction GameGrid() {\n    // fetch from a database\n    const startDate = new Date().valueOf();\n    const now = Date.now();\n    const index = Math.floor((now - startDate) / 86400000);\n    const secretWord = WORDLIST[index % WORDLIST.length];\n\n    const [rowIdx, setRowIdx] = useState(0);\n    const [words, updateWords] = useState(Array(6).fill(''));\n    const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n\n    const updateWordAtRow = (word) => {\n        const updatedWords = [...words];\n        updatedWords[rowIdx] = word;\n        updateWords(updatedWords);\n    }\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n          if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) {\n              return;\n          }\n\n          setRevealStates((prevStates) => {\n              const newStates = [...prevStates];\n              newStates[rowIdx] = true;\n              return newStates;\n          });\n\n          setRowIdx(Math.min(rowIdx + 1, 5));\n        } else if (event.key == 'Backspace') {\n          updateWordAtRow(words[rowIdx].slice(0, -1));\n        } else if (event.key.match(/[a-z]/i) && event.key.length == 1 && words[rowIdx].length < 5) {\n          updateWordAtRow(words[rowIdx].slice(0, -1));\n        }\n      };\n\n    useEffect(() => {\n    \n        window.addEventListener('keydown', handleKeyDown);\n    \n        return () => {\n          window.removeEventListener('keydown', handleKeyDown);\n        };\n      }, [words, rowIdx]);\n\n\n    return (\n        <div>\n            <GameRow word={words[0]} secretWord={secretWord} reveal={revealStates[0]} />\n            <GameRow word={words[1]} secretWord={secretWord} reveal={revealStates[1]} />\n            <GameRow word={words[2]} secretWord={secretWord} reveal={revealStates[2]} />\n            <GameRow word={words[3]} secretWord={secretWord} reveal={revealStates[3]} />\n            <GameRow word={words[4]} secretWord={secretWord} reveal={revealStates[4]} />\n            <GameRow word={words[5]} secretWord={secretWord} reveal={revealStates[5]} />\n        </div>\n    )\n}\n\nexport default GameGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}