{"ast":null,"code":"var _jsxFileName = \"/Users/bl4ze/web/worlde/src/components/GameGrid.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport GameRow from './GameRow';\nimport { WORDLIST } from '../wordlist/cuvinte';\n\n// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cyrb53 = (str, seed = 0) => {\n  let h1 = 0xdeadbeef ^ seed,\n    h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507);\n  h1 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);\n  h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);\n  h2 ^= Math.imul(h1 ^ h1 >>> 13, 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\nfunction getDailyWord() {\n  const today = new Date();\n  const epoch = new Date().valueOf();\n  const rand = cyrb53((today - epoch) / 86400000);\n  return WORDLIST[rand % WORDLIST.length];\n}\nfunction GameGrid() {\n  _s();\n  const secretWord = getDailyWord();\n  const [rowIdx, setRowIdx] = useState(0);\n  const [words, updateWords] = useState(Array(6).fill(''));\n  const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n  const [gameState, setGameState] = useState(-1);\n  useEffect(() => {\n    const updateWordAtRow = word => {\n      const updatedWords = [...words];\n      updatedWords[rowIdx] = word;\n      updateWords(updatedWords);\n    };\n    const handleKeyDown = event => {\n      if (event.key === 'Enter') {\n        if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) {\n          return;\n        }\n        setRevealStates(prevStates => {\n          const newStates = [...prevStates];\n          newStates[rowIdx] = true;\n          return newStates;\n        });\n        setRowIdx(Math.min(rowIdx + 1, 5));\n      } else if (event.key === 'Backspace') {\n        updateWordAtRow(words[rowIdx].slice(0, -1));\n      } else if (event.key.match(/[a-z]/i) && event.key.length === 1 && words[rowIdx].length < 5) {\n        updateWordAtRow(words[rowIdx] + event.key);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [words, rowIdx]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: words.map((word, index) => /*#__PURE__*/_jsxDEV(GameRow, {\n      word: word,\n      secretWord: secretWord,\n      reveal: revealStates[index]\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(GameGrid, \"0cc1G+5cr9t/wXvbbJsTrfDe1ik=\");\n_c = GameGrid;\nexport default GameGrid;\nvar _c;\n$RefreshReg$(_c, \"GameGrid\");","map":{"version":3,"names":["useEffect","useState","GameRow","WORDLIST","jsxDEV","_jsxDEV","cyrb53","str","seed","h1","h2","i","ch","length","charCodeAt","Math","imul","getDailyWord","today","Date","epoch","valueOf","rand","GameGrid","_s","secretWord","rowIdx","setRowIdx","words","updateWords","Array","fill","revealStates","setRevealStates","gameState","setGameState","updateWordAtRow","word","updatedWords","handleKeyDown","event","key","includes","prevStates","newStates","min","slice","match","window","addEventListener","removeEventListener","children","map","index","reveal","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bl4ze/web/worlde/src/components/GameGrid.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport GameRow from './GameRow'\nimport { WORDLIST } from '../wordlist/cuvinte';\n\n\n// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\nconst cyrb53 = (str, seed = 0) => {\n    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n    for(let i = 0, ch; i < str.length; i++) {\n        ch = str.charCodeAt(i);\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    h1  = Math.imul(h1 ^ (h1 >>> 16), 2246822507);\n    h1 ^= Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2  = Math.imul(h2 ^ (h2 >>> 16), 2246822507);\n    h2 ^= Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n  \n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\n\nfunction getDailyWord() {\n    const today = new Date();\n    const epoch = new Date().valueOf();\n    const rand = cyrb53((today-epoch) / 86400000);\n    return WORDLIST[rand % WORDLIST.length];\n}\n\nfunction GameGrid() {\n    const secretWord = getDailyWord();\n\n    const [rowIdx, setRowIdx] = useState(0);\n    const [words, updateWords] = useState(Array(6).fill(''));\n    const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n    const [gameState, setGameState] = useState(-1);\n\n    useEffect(() => {\n        const updateWordAtRow = (word) => {\n            const updatedWords = [...words];\n            updatedWords[rowIdx] = word;\n            updateWords(updatedWords);\n        }\n\n        const handleKeyDown = (event) => {\n            if (event.key === 'Enter') {\n              if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) {\n                  return;\n              }\n    \n              setRevealStates((prevStates) => {\n                  const newStates = [...prevStates];\n                  newStates[rowIdx] = true;\n                  return newStates;\n              });\n    \n              setRowIdx(Math.min(rowIdx + 1, 5));\n            } else if (event.key === 'Backspace') {\n              updateWordAtRow(words[rowIdx].slice(0, -1));\n            } else if (event.key.match(/[a-z]/i) && event.key.length === 1 && words[rowIdx].length < 5) {\n                updateWordAtRow(words[rowIdx] + event.key);\n            }\n          };\n\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n          window.removeEventListener('keydown', handleKeyDown);\n        };\n      }, [words, rowIdx]);\n\n\n    return (\n        <div>\n            {words.map((word, index) => (\n                <GameRow key={index} word={word} secretWord={secretWord} reveal={revealStates[index]} />\n            ))}\n        </div>\n    )\n}\n\nexport default GameGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}