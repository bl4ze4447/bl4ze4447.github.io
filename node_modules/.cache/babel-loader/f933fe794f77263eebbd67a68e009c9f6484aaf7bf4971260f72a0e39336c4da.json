{"ast":null,"code":"var _jsxFileName = \"/Users/bl4ze/web/worlde/src/components/GameGrid.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport GameRow from './GameRow';\nimport { WORDLIST } from '../wordlist/cuvinte';\n\n// Hash function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cyrb53 = (str, seed = 0) => {\n  let h1 = 0xdeadbeef ^ seed,\n    h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507);\n  h1 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);\n  h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);\n  h2 ^= Math.imul(h1 ^ h1 >>> 13, 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\n\n// Get today's \"random\" word\nfunction getDailyWord() {\n  const today = new Date().toISOString().split('T')[0];\n  const rand = cyrb53(today);\n  return WORDLIST[rand % WORDLIST.length];\n}\nfunction GameGrid({\n  keys,\n  simulateKey\n}) {\n  _s();\n  const secretWord = getDailyWord();\n  const [rowIdx, setRowIdx] = useState(0);\n  const [words, updateWords] = useState(Array(6).fill(''));\n  const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n  const [gameState, setGameState] = useState(0); // 0: playing, 1: won\n\n  const updateWordAtRow = word => {\n    updateWords(prev => {\n      const updated = [...prev];\n      updated[rowIdx] = word;\n      return updated;\n    });\n  };\n  const handleKey = useCallback(key => {\n    if (rowIdx === 6 || gameState === 1) return;\n    if (key === 'Enter') {\n      if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) return;\n      setRevealStates(prev => {\n        const newStates = [...prev];\n        newStates[rowIdx] = true;\n        return newStates;\n      });\n      setRowIdx(prev => Math.min(prev + 1, 6));\n    } else if (key === 'Backspace') {\n      updateWordAtRow(words[rowIdx].slice(0, -1));\n    } else if (/^[a-zA-Z]$/.test(key) && words[rowIdx].length < 5) {\n      updateWordAtRow(words[rowIdx] + key.toLowerCase());\n    }\n  }, [rowIdx, words, gameState]);\n  useEffect(() => {\n    const onKeyDown = e => handleKey(e.key);\n    window.addEventListener('keydown', onKeyDown);\n    return () => window.removeEventListener('keydown', onKeyDown);\n  }, [handleKey]);\n  useEffect(() => {\n    if (keys.length > 0) {\n      handleKey(keys[0]);\n      simulateKey(prev => prev.slice(1));\n    }\n  }, [keys, simulateKey, handleKey]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: words.map((word, index) => /*#__PURE__*/_jsxDEV(GameRow, {\n      word: word,\n      secretWord: secretWord,\n      reveal: revealStates[index],\n      setGameState: setGameState\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s(GameGrid, \"tvuJJ//7j4KlhHdYwz6KB9/tCQM=\");\n_c = GameGrid;\nexport default GameGrid;\nvar _c;\n$RefreshReg$(_c, \"GameGrid\");","map":{"version":3,"names":["useEffect","useState","useCallback","GameRow","WORDLIST","jsxDEV","_jsxDEV","cyrb53","str","seed","h1","h2","i","ch","length","charCodeAt","Math","imul","getDailyWord","today","Date","toISOString","split","rand","GameGrid","keys","simulateKey","_s","secretWord","rowIdx","setRowIdx","words","updateWords","Array","fill","revealStates","setRevealStates","gameState","setGameState","updateWordAtRow","word","prev","updated","handleKey","key","includes","newStates","min","slice","test","toLowerCase","onKeyDown","e","window","addEventListener","removeEventListener","children","map","index","reveal","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bl4ze/web/worlde/src/components/GameGrid.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport GameRow from './GameRow';\nimport { WORDLIST } from '../wordlist/cuvinte';\n\n// Hash function\nconst cyrb53 = (str, seed = 0) => {\n    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n    for (let i = 0, ch; i < str.length; i++) {\n        ch = str.charCodeAt(i);\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507);\n    h1 ^= Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507);\n    h2 ^= Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n\n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\n\n// Get today's \"random\" word\nfunction getDailyWord() {\n    const today = new Date().toISOString().split('T')[0];\n    const rand = cyrb53(today);\n    return WORDLIST[rand % WORDLIST.length];\n}\n\nfunction GameGrid({ keys, simulateKey }) {\n    const secretWord = getDailyWord();\n\n    const [rowIdx, setRowIdx] = useState(0);\n    const [words, updateWords] = useState(Array(6).fill(''));\n    const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n    const [gameState, setGameState] = useState(0); // 0: playing, 1: won\n\n    const updateWordAtRow = (word) => {\n        updateWords(prev => {\n            const updated = [...prev];\n            updated[rowIdx] = word;\n            return updated;\n        });\n    };\n\n    const handleKey = useCallback((key) => {\n        if (rowIdx === 6 || gameState === 1) return;\n\n        if (key === 'Enter') {\n            if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) return;\n\n            setRevealStates(prev => {\n                const newStates = [...prev];\n                newStates[rowIdx] = true;\n                return newStates;\n            });\n\n            setRowIdx(prev => Math.min(prev + 1, 6));\n        } else if (key === 'Backspace') {\n            updateWordAtRow(words[rowIdx].slice(0, -1));\n        } else if (/^[a-zA-Z]$/.test(key) && words[rowIdx].length < 5) {\n            updateWordAtRow(words[rowIdx] + key.toLowerCase());\n        }\n    }, [rowIdx, words, gameState]);\n\n    useEffect(() => {\n        const onKeyDown = (e) => handleKey(e.key);\n        window.addEventListener('keydown', onKeyDown);\n        return () => window.removeEventListener('keydown', onKeyDown);\n    }, [handleKey]);\n\n    useEffect(() => {\n        if (keys.length > 0) {\n            handleKey(keys[0]);\n            simulateKey(prev => prev.slice(1));\n        }\n    }, [keys, simulateKey, handleKey]);\n\n    return (\n        <div>\n            {words.map((word, index) => (\n                <GameRow\n                    key={index}\n                    word={word}\n                    secretWord={secretWord}\n                    reveal={revealStates[index]}\n                    setGameState={setGameState}\n                />\n            ))}\n            {/* Optional messages:\n            {gameState === 1 && <p className=\"game-state\">Ai câștigat, felicitări!</p>}\n            {rowIdx === 6 && gameState === 0 && <p>Ai pierdut, cuvântul era {secretWord}!</p>}\n            */}\n        </div>\n    );\n}\n\nexport default GameGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}