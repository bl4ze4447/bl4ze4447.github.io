{"ast":null,"code":"var _jsxFileName = \"/Users/bl4ze/web/worlde/src/components/GameRow.js\";\nimport Letter from './Letter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getCorrespondingState(word, secret) {\n  let states = Array(5).fill(0);\n  Array.from(word).forEach((ch, idx) => {\n    if (ch == secret[idx]) {\n      states[idx] = 1;\n    }\n  });\n}\nfunction GameRow(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-row\",\n    children: [Array.from(props.word).map((char, index) => /*#__PURE__*/_jsxDEV(Letter, {\n      char: char.toUpperCase(),\n      state: index % 2\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }, this)), 5 - props.word.length > 0 && Array(5 - props.word.length).fill(0).map((_, idx) => /*#__PURE__*/_jsxDEV(Letter, {\n      char: '',\n      state: 0\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_c = GameRow;\nexport default GameRow;\nvar _c;\n$RefreshReg$(_c, \"GameRow\");","map":{"version":3,"names":["Letter","jsxDEV","_jsxDEV","getCorrespondingState","word","secret","states","Array","fill","from","forEach","ch","idx","GameRow","props","className","children","map","char","index","toUpperCase","state","fileName","_jsxFileName","lineNumber","columnNumber","length","_","_c","$RefreshReg$"],"sources":["/Users/bl4ze/web/worlde/src/components/GameRow.js"],"sourcesContent":["import Letter from './Letter';\n\nfunction getCorrespondingState(word, secret) {\n    let states = Array(5).fill(0);\n    Array.from(word).forEach((ch, idx) => {\n        if (ch == secret[idx]) {\n            states[idx] = 1;\n        }\n    })\n}\n\nfunction GameRow(props) {\n    return (\n        <div className='game-row'>\n            {Array.from(props.word).map((char, index) => (\n                <Letter key={index} char={char.toUpperCase()} state={index % 2} />\n            ))}\n            {(5-props.word.length) > 0 && Array(5-props.word.length).fill(0).map((_, idx) => (\n                    <Letter key={idx} char={''} state={0} />\n            ))}\n        </div>\n    );\n}\n\nexport default GameRow;"],"mappings":";AAAA,OAAOA,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,qBAAqBA,CAACC,IAAI,EAAEC,MAAM,EAAE;EACzC,IAAIC,MAAM,GAAGC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAC7BD,KAAK,CAACE,IAAI,CAACL,IAAI,CAAC,CAACM,OAAO,CAAC,CAACC,EAAE,EAAEC,GAAG,KAAK;IAClC,IAAID,EAAE,IAAIN,MAAM,CAACO,GAAG,CAAC,EAAE;MACnBN,MAAM,CAACM,GAAG,CAAC,GAAG,CAAC;IACnB;EACJ,CAAC,CAAC;AACN;AAEA,SAASC,OAAOA,CAACC,KAAK,EAAE;EACpB,oBACIZ,OAAA;IAAKa,SAAS,EAAC,UAAU;IAAAC,QAAA,GACpBT,KAAK,CAACE,IAAI,CAACK,KAAK,CAACV,IAAI,CAAC,CAACa,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpCjB,OAAA,CAACF,MAAM;MAAakB,IAAI,EAAEA,IAAI,CAACE,WAAW,CAAC,CAAE;MAACC,KAAK,EAAEF,KAAK,GAAG;IAAE,GAAlDA,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA+C,CACpE,CAAC,EACA,CAAC,GAACX,KAAK,CAACV,IAAI,CAACsB,MAAM,GAAI,CAAC,IAAInB,KAAK,CAAC,CAAC,GAACO,KAAK,CAACV,IAAI,CAACsB,MAAM,CAAC,CAAClB,IAAI,CAAC,CAAC,CAAC,CAACS,GAAG,CAAC,CAACU,CAAC,EAAEf,GAAG,kBACpEV,OAAA,CAACF,MAAM;MAAWkB,IAAI,EAAE,EAAG;MAACG,KAAK,EAAE;IAAE,GAAxBT,GAAG;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuB,CAC9C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACG,EAAA,GAXQf,OAAO;AAahB,eAAeA,OAAO;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}