{"ast":null,"code":"var _jsxFileName = \"/Users/bl4ze/web/worlde/src/components/GameGrid.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport GameRow from './GameRow';\nimport { WORDLIST } from '../wordlist/cuvinte';\n\n// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cyrb53 = (str, seed = 0) => {\n  let h1 = 0xdeadbeef ^ seed,\n    h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507);\n  h1 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);\n  h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);\n  h2 ^= Math.imul(h1 ^ h1 >>> 13, 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\nfunction getDailyWord() {\n  const today = new Date().L;\n  const epoch = new Date().valueOf();\n  const rand = cyrb53((today - epoch) / 86400000);\n  return WORDLIST[rand % WORDLIST.length];\n}\nfunction GameGrid(props) {\n  _s();\n  const keys = props.keys;\n  const simulateKey = props.simulateKey;\n  const secretWord = getDailyWord();\n  const [rowIdx, setRowIdx] = useState(0);\n  const [words, updateWords] = useState(Array(6).fill(''));\n  const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n  const [gameState, setGameState] = useState(0);\n  useEffect(() => {\n    const updateWordAtRow = word => {\n      const updatedWords = [...words];\n      updatedWords[rowIdx] = word;\n      updateWords(updatedWords);\n    };\n    const handleKeyDown = event => {\n      if (rowIdx === 6 || gameState === 1) return;\n      if (event.key === 'Enter' || keys[0] === 'Enter') {\n        simulateKey(keys => {\n          let newKeys = [...keys.slice(1)];\n          return newKeys;\n        });\n        if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) {\n          return;\n        }\n        setRevealStates(prevStates => {\n          const newStates = [...prevStates];\n          newStates[rowIdx] = true;\n          return newStates;\n        });\n        setRowIdx(Math.min(rowIdx + 1, 6));\n      } else if (event.key === 'Backspace' || keys[0] === 'Backspace') {\n        simulateKey(keys => {\n          let newKeys = [...keys.slice(1)];\n          return newKeys;\n        });\n        updateWordAtRow(words[rowIdx].slice(0, -1));\n      } else if ((event.key.match(/[a-z]/i) && event.key.length === 1 || keys && keys[0] && keys[0].length === 1) && words[rowIdx].length < 5) {\n        if (keys[0]) {\n          updateWordAtRow(words[rowIdx] + keys[0]);\n          consumeKey();\n          return;\n        }\n        updateWordAtRow(words[rowIdx] + event.key);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [words, rowIdx, gameState, keys, consumeKey]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: words.map((word, index) => /*#__PURE__*/_jsxDEV(GameRow, {\n      word: word,\n      secretWord: secretWord,\n      reveal: revealStates[index],\n      setGameState: setGameState\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n_s(GameGrid, \"MptrypfOFZ8CchXUIRVthorK4P0=\");\n_c = GameGrid;\nexport default GameGrid;\nvar _c;\n$RefreshReg$(_c, \"GameGrid\");","map":{"version":3,"names":["useEffect","useState","GameRow","WORDLIST","jsxDEV","_jsxDEV","cyrb53","str","seed","h1","h2","i","ch","length","charCodeAt","Math","imul","getDailyWord","today","Date","L","epoch","valueOf","rand","GameGrid","props","_s","keys","simulateKey","secretWord","rowIdx","setRowIdx","words","updateWords","Array","fill","revealStates","setRevealStates","gameState","setGameState","updateWordAtRow","word","updatedWords","handleKeyDown","event","key","newKeys","slice","includes","prevStates","newStates","min","match","consumeKey","window","addEventListener","removeEventListener","children","map","index","reveal","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bl4ze/web/worlde/src/components/GameGrid.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport GameRow from './GameRow'\nimport { WORDLIST } from '../wordlist/cuvinte';\n\n\n// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\nconst cyrb53 = (str, seed = 0) => {\n    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n    for(let i = 0, ch; i < str.length; i++) {\n        ch = str.charCodeAt(i);\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    h1  = Math.imul(h1 ^ (h1 >>> 16), 2246822507);\n    h1 ^= Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2  = Math.imul(h2 ^ (h2 >>> 16), 2246822507);\n    h2 ^= Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n  \n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\n\nfunction getDailyWord() {\n    const today = new Date().L;\n    const epoch = new Date().valueOf();\n    const rand = cyrb53((today-epoch) / 86400000);\n    return WORDLIST[rand % WORDLIST.length];\n}\n\nfunction GameGrid(props) {\n    const keys = props.keys;\n    const simulateKey = props.simulateKey;\n\n    const secretWord = getDailyWord();\n\n    const [rowIdx, setRowIdx] = useState(0);\n    const [words, updateWords] = useState(Array(6).fill(''));\n    const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n    const [gameState, setGameState] = useState(0);\n\n    useEffect(() => {\n        const updateWordAtRow = (word) => {\n            const updatedWords = [...words];\n            updatedWords[rowIdx] = word;\n            updateWords(updatedWords);\n        }\n\n        const handleKeyDown = (event) => {\n            if (rowIdx === 6 || gameState === 1) return;\n\n            if (event.key === 'Enter' || keys[0] === 'Enter') {\n                simulateKey((keys) => {\n                    let newKeys = [...keys.slice(1)];\n                    return newKeys;\n                  });\n                if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) {\n                    return;\n                }\n    \n                setRevealStates((prevStates) => {\n                    const newStates = [...prevStates];\n                    newStates[rowIdx] = true;\n                    return newStates;\n                });\n    \n                setRowIdx(Math.min(rowIdx + 1, 6));\n            } else if (event.key === 'Backspace' || keys[0] === 'Backspace') {\n                simulateKey((keys) => {\n                    let newKeys = [...keys.slice(1)];\n                    return newKeys;\n                });                updateWordAtRow(words[rowIdx].slice(0, -1));\n            } else if (((event.key.match(/[a-z]/i) && event.key.length === 1) || (keys && keys[0] && keys[0].length === 1)) && words[rowIdx].length < 5) {\n                if (keys[0]) {\n                    updateWordAtRow(words[rowIdx] + keys[0]);\n                    consumeKey();\n                    return;\n                }\n\n                updateWordAtRow(words[rowIdx] + event.key);\n            }\n          };\n\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n          window.removeEventListener('keydown', handleKeyDown);\n        };\n      }, [words, rowIdx, gameState, keys, consumeKey]);\n\n\n    return (\n        <div>\n            {words.map((word, index) => (\n                <GameRow key={index} word={word} secretWord={secretWord} reveal={revealStates[index]} setGameState={setGameState} />\n            ))}\n\n            {/* { gameState === 1 && (\n                <p className='game-state'>Ai castigat, felicitari!</p>\n            )}\n            { rowIdx === 6 && gameState === 0 && (\n                <p>Ai pierdut, cuvantul a fost {secretWord}!</p>\n            )} */}\n        </div>\n    )\n}\n\nexport default GameGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}