{"ast":null,"code":"var _jsxFileName = \"/Users/bl4ze/web/worlde/src/components/GameGrid.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport GameRow from './GameRow';\nimport { WORDLIST } from '../wordlist/cuvinte';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameGrid() {\n  _s();\n  // fetch from a database\n  const startDate = new Date().valueOf();\n  const now = Date.now();\n  const index = Math.floor((now - startDate) / 86400000);\n  const secretWord = WORDLIST[index % WORDLIST.length];\n  const [rowIdx, setRowIdx] = useState(0);\n  const [words, updateWords] = useState(Array(6).fill(\"\"));\n  useEffect(() => {\n    const handleKeyDown = event => {\n      console.log(event.key);\n      if (event.key === 'Enter') {\n        // check if the word is valid\n        if (words[rowIdx].length != 5 || !WORDLIST.includes(words[rowIdx])) {\n          return;\n        }\n        let idx = rowIdx + 1;\n        if (idx > 5) idx = 5;\n        setRowIdx(idx);\n      } else if (event.key == 'Backspace') {\n        let modifiedWords = words.map((val, idx) => {\n          if (idx == rowIdx) {\n            val = val.substring(0, val.length - 1);\n          }\n          return val;\n        });\n        updateWords(modifiedWords);\n      } else if (event.key.match(/[a-z]/i) && event.key.length == 1 && words[rowIdx].length < 5) {\n        let modifiedWords = words.map((val, idx) => {\n          if (idx == rowIdx) {\n            val = val + event.key;\n          }\n          return val;\n        });\n        updateWords(modifiedWords);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [words, rowIdx]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[0],\n      secretWord: secretWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[1],\n      secretWord: secretWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[2],\n      secretWord: secretWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[3],\n      secretWord: secretWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[4],\n      secretWord: secretWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameRow, {\n      word: words[5],\n      secretWord: secretWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(GameGrid, \"m+ah3b5fT4/2MzbPj5gbtibTp24=\");\n_c = GameGrid;\nexport default GameGrid;\nvar _c;\n$RefreshReg$(_c, \"GameGrid\");","map":{"version":3,"names":["useEffect","useState","GameRow","WORDLIST","jsxDEV","_jsxDEV","GameGrid","_s","startDate","Date","valueOf","now","index","Math","floor","secretWord","length","rowIdx","setRowIdx","words","updateWords","Array","fill","handleKeyDown","event","console","log","key","includes","idx","modifiedWords","map","val","substring","match","window","addEventListener","removeEventListener","children","word","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bl4ze/web/worlde/src/components/GameGrid.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport GameRow from './GameRow'\nimport { WORDLIST } from '../wordlist/cuvinte';\n\n\nfunction GameGrid() {\n    // fetch from a database\n    const startDate = new Date().valueOf();\n    const now = Date.now();\n    const index = Math.floor((now - startDate) / 86400000);\n    const secretWord = WORDLIST[index % WORDLIST.length];\n\n    const [rowIdx, setRowIdx] = useState(0);\n    const [words, updateWords] = useState(Array(6).fill(\"\"));\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            console.log(event.key);\n          if (event.key === 'Enter') {\n            // check if the word is valid\n            if (words[rowIdx].length != 5 || !WORDLIST.includes(words[rowIdx])) {\n                return;\n            }\n            let idx = rowIdx+1;\n            if (idx >5) idx = 5;\n            setRowIdx(idx);\n          } else if (event.key == 'Backspace') {\n            let modifiedWords = words.map((val, idx) => {\n                if (idx == rowIdx) {\n                    val = val.substring(0, val.length-1);\n                }\n\n                return val;\n            });\n\n            updateWords(modifiedWords);\n          } else if (event.key.match(/[a-z]/i) && event.key.length == 1 && words[rowIdx].length < 5) {\n            let modifiedWords = words.map((val, idx) => {\n                if (idx == rowIdx) {\n                    val = val + event.key;\n                }\n\n                return val;\n            });\n\n            updateWords(modifiedWords);\n          }\n        };\n    \n        window.addEventListener('keydown', handleKeyDown);\n    \n        return () => {\n          window.removeEventListener('keydown', handleKeyDown);\n        };\n      }, [words, rowIdx]);\n\n\n\n    return (\n        <div>\n            <GameRow word={words[0]} secretWord={secretWord} />\n            <GameRow word={words[1]} secretWord={secretWord} />\n            <GameRow word={words[2]} secretWord={secretWord} />\n            <GameRow word={words[3]} secretWord={secretWord} />\n            <GameRow word={words[4]} secretWord={secretWord} />\n            <GameRow word={words[5]} secretWord={secretWord} />\n        </div>\n    )\n}\n\nexport default GameGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}