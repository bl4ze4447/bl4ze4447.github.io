{"ast":null,"code":"var _jsxFileName = \"/Users/bl4ze/web/worlde/src/components/GameGrid.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport GameRow from './GameRow';\nimport { WORDLIST } from '../wordlist/cuvinte';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction xmur3(str) {\n  for (var i = 0, h = 1779033703 ^ str.length; i < str.length; i++) h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\n  h = h << 13 | h >>> 19;\n  return () => {\n    h = Math.imul(h ^ h >>> 16, 2246822507);\n    h = Math.imul(h ^ h >>> 13, 3266489909);\n    return (h ^= h >>> 16) >>> 0;\n  };\n}\nfunction mulberry32(seed) {\n  return () => {\n    let t = seed += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n  };\n}\nfunction getDailyWord() {\n  const today = new Date().toISOString().split('T')[0];\n  const seed = xmur3(today);\n  const rand = mulberry32(seed);\n  const index = Math.floor(rand * WORDLIST.length);\n  return WORDLIST[index % WORDLIST.length];\n}\nfunction GameGrid() {\n  _s();\n  const secretWord = getDailyWord();\n  const [rowIdx, setRowIdx] = useState(0);\n  const [words, updateWords] = useState(Array(6).fill(''));\n  const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n  useEffect(() => {\n    const updateWordAtRow = word => {\n      const updatedWords = [...words];\n      updatedWords[rowIdx] = word;\n      updateWords(updatedWords);\n    };\n    const handleKeyDown = event => {\n      if (event.key === 'Enter') {\n        if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) {\n          return;\n        }\n        setRevealStates(prevStates => {\n          const newStates = [...prevStates];\n          newStates[rowIdx] = true;\n          return newStates;\n        });\n        setRowIdx(Math.min(rowIdx + 1, 5));\n      } else if (event.key === 'Backspace') {\n        updateWordAtRow(words[rowIdx].slice(0, -1));\n      } else if (event.key.match(/[a-z]/i) && event.key.length === 1 && words[rowIdx].length < 5) {\n        updateWordAtRow(words[rowIdx] + event.key);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [words, rowIdx]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: words.map((word, index) => /*#__PURE__*/_jsxDEV(GameRow, {\n      word: word,\n      secretWord: secretWord,\n      reveal: revealStates[index]\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(GameGrid, \"tP5POiloizNcLfuvHAipNShCdSA=\");\n_c = GameGrid;\nexport default GameGrid;\nvar _c;\n$RefreshReg$(_c, \"GameGrid\");","map":{"version":3,"names":["useEffect","useState","GameRow","WORDLIST","jsxDEV","_jsxDEV","xmur3","str","i","h","length","Math","imul","charCodeAt","mulberry32","seed","t","getDailyWord","today","Date","toISOString","split","rand","index","floor","GameGrid","_s","secretWord","rowIdx","setRowIdx","words","updateWords","Array","fill","revealStates","setRevealStates","updateWordAtRow","word","updatedWords","handleKeyDown","event","key","includes","prevStates","newStates","min","slice","match","window","addEventListener","removeEventListener","children","map","reveal","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bl4ze/web/worlde/src/components/GameGrid.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport GameRow from './GameRow'\nimport { WORDLIST } from '../wordlist/cuvinte';\n\nfunction xmur3(str) {\n    for (var i = 0, h = 1779033703 ^ str.length; i < str.length; i++)\n        h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\n    h = (h << 13) | (h >>> 19);\n    return () => {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction mulberry32(seed) {\n    return () => {\n        let t = seed += 0x6D2B79F5;\n        t = Math.imul(t ^ (t >>> 15), t | 1);\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n    };\n}\n\nfunction getDailyWord() {\n    const today = new Date().toISOString().split('T')[0];\n    const seed = xmur3(today);\n    const rand = mulberry32(seed);\n    const index = Math.floor(rand * WORDLIST.length);\n    return WORDLIST[index % WORDLIST.length];\n}\n\nfunction GameGrid() {\n    const secretWord = getDailyWord();\n\n    const [rowIdx, setRowIdx] = useState(0);\n    const [words, updateWords] = useState(Array(6).fill(''));\n    const [revealStates, setRevealStates] = useState(Array(6).fill(false));\n\n    useEffect(() => {\n        const updateWordAtRow = (word) => {\n            const updatedWords = [...words];\n            updatedWords[rowIdx] = word;\n            updateWords(updatedWords);\n        }\n\n        const handleKeyDown = (event) => {\n            if (event.key === 'Enter') {\n              if (words[rowIdx].length !== 5 || !WORDLIST.includes(words[rowIdx])) {\n                  return;\n              }\n    \n              setRevealStates((prevStates) => {\n                  const newStates = [...prevStates];\n                  newStates[rowIdx] = true;\n                  return newStates;\n              });\n    \n              setRowIdx(Math.min(rowIdx + 1, 5));\n            } else if (event.key === 'Backspace') {\n              updateWordAtRow(words[rowIdx].slice(0, -1));\n            } else if (event.key.match(/[a-z]/i) && event.key.length === 1 && words[rowIdx].length < 5) {\n                updateWordAtRow(words[rowIdx] + event.key);\n            }\n          };\n\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n          window.removeEventListener('keydown', handleKeyDown);\n        };\n      }, [words, rowIdx]);\n\n\n    return (\n        <div>\n            {words.map((word, index) => (\n                <GameRow key={index} word={word} secretWord={secretWord} reveal={revealStates[index]} />\n            ))}\n        </div>\n    )\n}\n\nexport default GameGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}